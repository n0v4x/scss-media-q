@use "sass:math";

@function px-to-em($pixels, $context: $FONT_SIZE_BASE) {
  @return math.div($pixels, $context) * 1em;
}

@function flat($list) {
  $result: ();
  $separator: list-separator($list);

  @each $list-item in $list {
    @if type-of($list-item) == "list" {
      $result: join($result, $list-item, $separator);
    } @else {
      $result: append($result, $list-item, $separator);
    }
  }

  @return $result;
}

@function last($list) {
  $last-index: length($list);

  @if $last-index < 1 {
    @return null;
  }

  @return nth($list, $last-index);
}

@function remove-last($list) {
  $result: ();
  $separator: list-separator($list);

  @if length($list) > 1 {
    @for $i from 1 through length($list) - 1 {
      $result: append($result, nth($list, $i), $separator);
    }
  }

  @return $result;
}

@function reverse($list) {
  $result: ();
  $list-length: length($list);
  $separator: list-separator($list);

  @if $list-length > 1 {
    @for $i from $list-length through 1 {
      $result: append($result, nth($list, $i), $separator);
    }
  } @else {
    $result: $list;
  }

  @return $result;
}

$FONT_SIZE_BASE: 16px !default;

$LT_OP: "<", "lt";
$GT_OP: ">", "gt";
$GE_OP: ">=", "ge";
$LE_OP: "<=", "le";
$EQ_OP: "==", "eq";

$COMPARISON_OPERATORS: flat(($LT_OP, $GT_OP, $GE_OP, $LE_OP, $EQ_OP));

$RANGE_MEDIA_FEATURES: ("width", "height", "resolution");

$DEFAULT_RANGE_MEDIA_FEATURE: "width" !default;
$DEFAULT_MEDIA_FEATURE: "min-width" !default;

$PREDEFINED_EXPRESSIONS: () !default;
$CONVERT_PX_TO_EM: false !default;

$CACHED_QUERIES: ();

@function get-range-media-feature-prefix($operator) {
  @if not is-comparison-operator($operator) {
    @error '"#{$operator}" is not valid comparison operator';
  }

  @if is-max-constraint-operator($operator) {
    @return "max-";
  } @else if is-min-constraint-operator($operator) {
    @return "min-";
  }

  @return "";
}

@function is-valid-range-media-feature-name($range-media-feature-name) {
  @return index($RANGE_MEDIA_FEATURES, $range-media-feature-name) != null;
}

@function is-valid-range-media-feature-value($value) {
  @return type-of($value) == "number" and index(("", "px"), unit($value));
}

@function normalize-range-media-feature-name(
  $media-feature-name,
  $comparison-operator
) {
  $media-feature-prefix: get-range-media-feature-prefix($comparison-operator);

  @return "#{$media-feature-prefix}#{$media-feature-name}";
}

@function normalize-range-media-feature-value(
  $media-feature-value,
  $comparison-operator
) {
  @if not is-valid-range-media-feature-value($media-feature-value) {
    @error unquote("\"#{$media-feature-value}\" is not valid range media feature value");
  }

  @if is-gt-operator($comparison-operator) {
    $media-feature-value: $media-feature-value + 1;
  } @else if is-lt-operator($comparison-operator) {
    $media-feature-value: $media-feature-value - 1;
  }

  @return $media-feature-value;
}

@function to-media-feature-string(
  $media-feature-name,
  $media-feature-value: null
) {
  $inner: if(
    $media-feature-value,
    "#{$media-feature-name}: #{$media-feature-value}",
    $media-feature-name
  );

  @return "(#{$inner})";
}

@function to-media-feature($expression, $px-to-em: $CONVERT_PX_TO_EM) {
  $expression-length: length($expression);

  @if $expression-length < 1 or $expression-length > 3 {
    @error unquote('Not valid length of the expression: #{$expression}');
  }

  $media-feature-name: nth($expression, 1);
  $media-feature-value: null;

  @if $expression-length == 2 {
    $media-feature-value: nth($expression, 2);
  } @else if $expression-length == 3 {
    $operator: nth($expression, 2);
    $media-feature-name: normalize-range-media-feature-name(
      $media-feature-name,
      $operator
    );
    $media-feature-value: normalize-range-media-feature-value(
      nth($expression, 3),
      $operator
    );
  }

  @if $px-to-em and is-valid-range-media-feature-value($media-feature-value) {
    $media-feature-value: px-to-em($media-feature-value);
  }

  @return to-media-feature-string($media-feature-name, $media-feature-value);
}

@function get-cached-query($key) {
  @return map-get($CACHED_QUERIES, $key);
}

@function get-predefined-expression($expression) {
  @return map-get($PREDEFINED_EXPRESSIONS, $expression);
}

@function is-cached-query($key) {
  @return map-has-key($CACHED_QUERIES, $key);
}

@function is-predefined-expression($expression) {
  @return map-has-key($PREDEFINED_EXPRESSIONS, $expression);
}

@function normalize-expression($expression) {
  @if length($expression) == 1 {
    @if type-of(nth($expression, 1)) == "number" {
      @return ($DEFAULT_MEDIA_FEATURE nth($expression, 1));
    }

    @return $expression;
  } @else if length($expression) == 2 {
    $left-operand: nth($expression, 1);
    $right-operand: nth($expression, 2);

    @if type-of($left-operand) == "number" {
      @if type-of($right-operand) == "number" {
        @error unquote("Not valid expression");
      }

      $temp: $left-operand;
      $left-operand: $right-operand;
      $right-operand: $temp;
    }

    @if is-comparison-operator($left-operand) {
      @if not is-valid-range-media-feature-value($right-operand) {
        @error unquote("Not valid expression");
      }

      $operator: $left-operand;
      $left-operand: $DEFAULT_RANGE_MEDIA_FEATURE;

      @return ($left-operand $operator $right-operand);
    } @else {
      @return ($left-operand $right-operand);
    }
  } @else if length($expression) == 3 {
    $left-operand: nth($expression, 1);
    $operator: nth($expression, 2);
    $right-operand: nth($expression, 3);

    @if not is-comparison-operator($operator) {
      @error unquote('Not valid operator: "#{$operator}"');
    }

    $normalized-expression: normalize-expression($left-operand $right-operand);
    $left-operand: nth($normalized-expression, 1);
    $right-operand: nth($normalized-expression, 2);

    @return ($left-operand $operator $right-operand);
  } @else {
    @error "Not valid expression";
  }

  @return $normalized-expression;
}

@function set-cached-query($key, $value) {
  $CACHED_QUERIES-item: (
    $key: $value,
  );
  $CACHED_QUERIES: map-merge($CACHED_QUERIES, $CACHED_QUERIES-item) !global;

  @return get-cached-query($key);
}

@function is-comparison-operator($operator) {
  @return index($COMPARISON_OPERATORS, $operator) != null;
}

@function is-constraint-operator($operator) {
  @return is-max-constraint-operator($operator) or
    is-min-constraint-operator($operator);
}

@function is-eq-operator($maybe-eq-operator) {
  @return index($EQ_OP, $maybe-eq-operator) != null;
}

@function is-ge-operator($maybe-ge-operator) {
  @return index($GE_OP, $maybe-ge-operator) != null;
}

@function is-gt-operator($maybe-gt-operator) {
  @return index($GT_OP, $maybe-gt-operator) != null;
}

@function is-le-operator($maybe-le-operator) {
  @return index($LE_OP, $maybe-le-operator) != null;
}

@function is-lt-operator($maybe-lt-operator) {
  @return index($LT_OP, $maybe-lt-operator) != null;
}

@function is-max-constraint-operator($operator) {
  @return is-lt-operator($operator) or is-le-operator($operator);
}

@function is-min-constraint-operator($operator) {
  @return is-gt-operator($operator) or is-ge-operator($operator);
}

@function q($expression) {
  $query: null;

  @if is-cached-query($expression) {
    $query: get-cached-query($expression);
  } @else {
    @if length($expression) == 1 and is-predefined-expression($expression) {
      $expression: get-predefined-expression($expression);
    }

    $normalized-expression: normalize-expression($expression);

    $query: set-cached-query(
      $expression,
      to-media-feature($normalized-expression)
    );
  }

  @return $query;
}
